package modes

import (
	"github.com/jalaj711/gocrypto/aes"
	"reflect"
	"testing"
)

func TestOFB_Encrypt(t *testing.T) {
	type fields struct {
		cipher  BlockCipher
		padding Padding
		iv      []byte
	}
	type args struct {
		data []byte
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   []byte
	}{
		{
			name: "ofb-aes-enc-1",
			fields: fields{
				cipher:  &aes.AES{},
				padding: &PKCS7{},
				iv: []byte{
					0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0,
				},
			},
			args: args{
				data: []byte{
					0x00, 0x7e, 0x65, 0x77,
					0xe6, 0x57, 0x7a, 0xbc,
					0x62, 0xcd, 0x28, 0x73,
					0x65, 0xf1, 0x99,
				},
			},
			want: []byte{
				0x66, 0x97, 0x2e, 0xa3,
				0x09, 0xdd, 0x56, 0x87,
				0xea, 0x81, 0xd2, 0x2a,
				0xaf, 0xc5, 0xb2, 0x2f,
			},
		},
		{
			name: "ofb-aes-enc-2-multi-block",
			fields: fields{
				cipher:  &aes.AES{},
				padding: &PKCS7{},
				iv: []byte{
					0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0,
				},
			},
			args: args{
				data: []byte{
					0x00, 0x7e, 0x65, 0x77,
					0xe6, 0x57, 0x7a, 0xbc,
					0x62, 0xcd, 0x28, 0x73,
					0x65, 0xf1, 0x99, 0x00,
					0x7e, 0x65, 0x77, 0xe2,
					0xe6, 0x57, 0x7a, 0xbc,
					0x62, 0xcd, 0x28, 0x73,
					0x65, 0xf1, 0x99,
				},
			},
			want: []byte{
				0x66, 0x97, 0x2e, 0xa3,
				0x09, 0xdd, 0x56, 0x87,
				0xea, 0x81, 0xd2, 0x2a,
				0xaf, 0xc5, 0xb2, 0x2e,
				0x89, 0xf0, 0xca, 0xa8,
				0xb4, 0xb5, 0xe4, 0x6b,
				0x71, 0x1e, 0x3b, 0x89,
				0x45, 0x18, 0x14, 0xbd,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ofb := &OFB{
				cipher:  tt.fields.cipher,
				padding: tt.fields.padding,
				iv:      tt.fields.iv,
			}
			ofb.Init([]byte{
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
			}, []byte{})
			if got := ofb.Encrypt(tt.args.data); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Encrypt() = %x, want %x", got, tt.want)
			}
		})
	}
}

func TestOFB_Decrypt(t *testing.T) {
	type fields struct {
		cipher  BlockCipher
		padding Padding
		iv      []byte
	}
	type args struct {
		data []byte
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   []byte
	}{
		{
			name: "ofb-aes-dec-1",
			fields: fields{
				cipher:  &aes.AES{},
				padding: &PKCS7{},
				iv: []byte{
					0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0,
				},
			},
			args: args{
				data: []byte{
					0x66, 0x97, 0x2e, 0xa3,
					0x09, 0xdd, 0x56, 0x87,
					0xea, 0x81, 0xd2, 0x2a,
					0xaf, 0xc5, 0xb2, 0x2f,
				},
			},
			want: []byte{
				0x00, 0x7e, 0x65, 0x77,
				0xe6, 0x57, 0x7a, 0xbc,
				0x62, 0xcd, 0x28, 0x73,
				0x65, 0xf1, 0x99,
			},
		},

		{
			name: "ofb-aes-dec-2-multi-block",
			fields: fields{
				cipher:  &aes.AES{},
				padding: &PKCS7{},
				iv: []byte{
					0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0,
					0x0, 0x0, 0x0, 0x0,
				},
			},
			args: args{
				data: []byte{
					0x66, 0x97, 0x2e, 0xa3,
					0x09, 0xdd, 0x56, 0x87,
					0xea, 0x81, 0xd2, 0x2a,
					0xaf, 0xc5, 0xb2, 0x2e,
					0x89, 0xf0, 0xca, 0xa8,
					0xb4, 0xb5, 0xe4, 0x6b,
					0x71, 0x1e, 0x3b, 0x89,
					0x45, 0x18, 0x14, 0xbd,
				},
			},
			want: []byte{
				0x00, 0x7e, 0x65, 0x77,
				0xe6, 0x57, 0x7a, 0xbc,
				0x62, 0xcd, 0x28, 0x73,
				0x65, 0xf1, 0x99, 0x00,
				0x7e, 0x65, 0x77, 0xe2,
				0xe6, 0x57, 0x7a, 0xbc,
				0x62, 0xcd, 0x28, 0x73,
				0x65, 0xf1, 0x99,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ofb := &OFB{
				cipher:  tt.fields.cipher,
				padding: tt.fields.padding,
				iv:      tt.fields.iv,
			}
			ofb.Init([]byte{
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
			}, []byte{})
			if got := ofb.Decrypt(tt.args.data); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Decrypt() = %x, want %x", got, tt.want)
			}
		})
	}
}
